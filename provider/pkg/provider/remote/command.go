// Copyright 2016-2022, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package remote

import (
	_ "embed"

	"github.com/pulumi/pulumi-go-provider/infer"

	"github.com/pulumi/pulumi-command/provider/pkg/provider/common"
)

//go:embed command.md
var resourceDoc string

type Command struct{}

// Implementing Annotate lets you provide descriptions for resources and they will
// be visible in the provider's schema and the generated SDKs.
func (c *Command) Annotate(a infer.Annotator) {
	a.Describe(&c, resourceDoc)
}

// The arguments for a remote Command resource.
type CommandInputs struct {
	common.ResourceInputs
	// the pulumi-go-provider library uses field tags to dictate behavior.
	// pulumi:"connection" specifies the name of the field in the schema
	// pulumi:"optional" specifies that a field is optional. This must be a pointer.
	// provider:"replaceOnChanges" specifies that the resource will be replaced if the field changes.
	// provider:"secret" specifies that a field should be marked secret.
	Stdin                  *string           `pulumi:"stdin,optional"`
	Logging                *Logging          `pulumi:"logging,optional"`
	Connection             *Connection       `pulumi:"connection" provider:"secret"`
	Environment            map[string]string `pulumi:"environment,optional"`
	AddPreviousOutputInEnv *bool             `pulumi:"addPreviousOutputInEnv,optional"`
}

// Implementing Annotate lets you provide descriptions and default values for arguments and they will
// be visible in the provider's schema and the generated SDKs.
func (c *CommandInputs) Annotate(a infer.Annotator) {
	a.Describe(&c.Stdin, "Pass a string to the command's process as standard in")
	a.Describe(&c.Logging, `If the command's stdout and stderr should be logged. This doesn't affect the capturing of
stdout and stderr as outputs. If there might be secrets in the output, you can disable logging here and mark the
outputs as secret via 'additionalSecretOutputs'. Defaults to logging both stdout and stderr.`)
	a.Describe(&c.Connection, "The parameters with which to connect to the remote host.")
	a.Describe(&c.Environment, `Additional environment variables available to the command's process.
Note that this only works if the SSH server is configured to accept these variables via AcceptEnv.
Alternatively, if a Bash-like shell runs the command on the remote host, you could prefix the command itself
with the variables in the form 'VAR=value command'.`)
	a.Describe(&c.AddPreviousOutputInEnv,
		`If the previous command's stdout and stderr (as generated by the prior create/update) is
injected into the environment of the next run as PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR.
Defaults to true.`)
}

// The properties for a remote Command resource.
type CommandOutputs struct {
	CommandInputs
	BaseOutputs
}
