// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package local

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-command/sdk/go/command/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A local command to be executed.
//
// This command can be inserted into the life cycles of other resources using the `dependsOn` or `parent` resource options. A command is considered to have failed when it finished with a non-zero exit code. This will fail the CRUD step of the `Command` resource.
//
// ## Example Usage
//
// ### Basic Example
//
// This example shows the simplest use case, simply running a command on `create` in the Pulumi lifecycle.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-command/sdk/go/command/local"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			random, err := local.NewCommand(ctx, "my-bucket", &local.CommandArgs{
//				Create: pulumi.String("openssl rand -hex 16"),
//			})
//			if err != nil {
//				return err
//			}
//
//			ctx.Export("output", random.Stdout)
//			return nil
//		})
//	}
//
// ```
//
// ### Invoking a Lambda during Pulumi Deployment
//
// This example show using a local command to invoke an AWS Lambda once it's deployed. The Lambda invocation could also depend on other resources.
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//	"fmt"
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lambda"
//	"github.com/pulumi/pulumi-command/sdk/go/command/local"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			awsConfig := config.New(ctx, "aws")
//			awsRegion := awsConfig.Require("region")
//
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"Version": "2012-10-17",
//				"Statement": []map[string]interface{}{
//					{
//						"Action": "sts:AssumeRole",
//						"Effect": "Allow",
//						"Principal": map[string]interface{}{
//							"Service": "lambda.amazonaws.com",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			lambdaRole, err := iam.NewRole(ctx, "lambdaRole", &iam.RoleArgs{
//				AssumeRolePolicy: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			lambdaFunction, err := lambda.NewFunction(ctx, "lambdaFunction", &lambda.FunctionArgs{
//				Name:    pulumi.String("f"),
//				Publish: pulumi.Bool(true),
//				Role:    lambdaRole.Arn,
//				Handler: pulumi.String("index.handler"),
//				Runtime: pulumi.String(lambda.RuntimeNodeJS20dX),
//				Code:    pulumi.NewFileArchive("./handler"),
//			})
//			if err != nil {
//				return err
//			}
//			invokeCommand, err := local.NewCommand(ctx, "invokeCommand", &local.CommandArgs{
//				Create: pulumi.String(fmt.Sprintf("aws lambda invoke --function-name \"$FN\" --payload '{\"stackName\": \"%v\"}' --cli-binary-format raw-in-base64-out out.txt >/dev/null && cat out.txt | tr -d '\"'  && rm out.txt", ctx.Stack())),
//				Environment: pulumi.StringMap{
//					"FN":         lambdaFunction.Arn,
//					"AWS_REGION": pulumi.String(awsRegion),
//					"AWS_PAGER":  pulumi.String(""),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				lambdaFunction,
//			}))
//			if err != nil {
//				return err
//			}
//			ctx.Export("output", invokeCommand.Stdout)
//			return nil
//		})
//	}
//
// ```
//
// ### Using Triggers
//
// This example defines several trigger values of various kinds. Changes to any of them will cause `cmd` to be re-run.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-command/sdk/go/command/local"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			str := pulumi.String("foo")
//
//			fileAsset := pulumi.NewFileAsset("Pulumi.yaml")
//
//			rand, err := random.NewRandomString(ctx, "rand", &random.RandomStringArgs{
//				Length: pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//
//			localFile, err := local.NewCommand(ctx, "localFile", &local.CommandArgs{
//				Create: pulumi.String("touch foo.txt"),
//				ArchivePaths: pulumi.StringArray{
//					pulumi.String("*.txt"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//
//			_, err = local.NewCommand(ctx, "cmd", &local.CommandArgs{
//				Create: pulumi.String("echo create > op.txt"),
//				Delete: pulumi.String("echo delete >> op.txt"),
//				Triggers: pulumi.Array{
//					str,
//					rand.Result,
//					fileAsset,
//					localFile.Archive,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Command struct {
	pulumi.CustomResourceState

	// If the previous command's stdout and stderr (as generated by the prior create/update) is
	// injected into the environment of the next run as PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR.
	// Defaults to true.
	AddPreviousOutputInEnv pulumi.BoolPtrOutput `pulumi:"addPreviousOutputInEnv"`
	// An archive asset containing files found after running the command.
	Archive pulumi.ArchiveOutput `pulumi:"archive"`
	// A list of path globs to return as a single archive asset after the command completes.
	//
	// When specifying glob patterns the following rules apply:
	// - We only include files not directories for assets and archives.
	// - Path separators are `/` on all platforms - including Windows.
	// - Patterns starting with `!` are 'exclude' rules.
	// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
	// - `*` matches anything except `/`
	// - `**` matches anything, _including_ `/`
	// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
	// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
	//
	// #### Example
	//
	// Given the rules:
	//
	// When evaluating against this folder:
	//
	// The following paths will be returned:
	ArchivePaths pulumi.StringArrayOutput `pulumi:"archivePaths"`
	// A list of path globs to read after the command completes.
	//
	// When specifying glob patterns the following rules apply:
	// - We only include files not directories for assets and archives.
	// - Path separators are `/` on all platforms - including Windows.
	// - Patterns starting with `!` are 'exclude' rules.
	// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
	// - `*` matches anything except `/`
	// - `**` matches anything, _including_ `/`
	// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
	// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
	//
	// #### Example
	//
	// Given the rules:
	//
	// When evaluating against this folder:
	//
	// The following paths will be returned:
	AssetPaths pulumi.StringArrayOutput `pulumi:"assetPaths"`
	// A map of assets found after running the command.
	// The key is the relative path from the command dir
	Assets pulumi.AssetOrArchiveMapOutput `pulumi:"assets"`
	// The command to run once on resource creation.
	//
	// If an `update` command isn't provided, then `create` will also be run when the resource's inputs are modified.
	//
	// Note that this command will not be executed if the resource has already been created and its inputs are unchanged.
	//
	// Use `local.runOutput` if you need to run a command on every execution of your program.
	Create pulumi.StringPtrOutput `pulumi:"create"`
	// The command to run on resource delettion.
	//
	// The environment variables `PULUMI_COMMAND_STDOUT` and `PULUMI_COMMAND_STDERR` are set to the stdout and stderr properties of the Command resource from previous create or update steps.
	Delete pulumi.StringPtrOutput `pulumi:"delete"`
	// The directory from which to run the command from. If `dir` does not exist, then
	// `Command` will fail.
	Dir pulumi.StringPtrOutput `pulumi:"dir"`
	// Additional environment variables available to the command's process.
	Environment pulumi.StringMapOutput `pulumi:"environment"`
	// The program and arguments to run the command.
	// On Linux and macOS, defaults to: `["/bin/sh", "-c"]`. On Windows, defaults to: `["cmd", "/C"]`
	Interpreter pulumi.StringArrayOutput `pulumi:"interpreter"`
	// If the command's stdout and stderr should be logged. This doesn't affect the capturing of
	// stdout and stderr as outputs. If there might be secrets in the output, you can disable logging here and mark the
	// outputs as secret via 'additionalSecretOutputs'. Defaults to logging both stdout and stderr.
	Logging LoggingPtrOutput `pulumi:"logging"`
	// The standard error of the command's process
	Stderr pulumi.StringOutput `pulumi:"stderr"`
	// Pass a string to the command's process as standard in
	Stdin pulumi.StringPtrOutput `pulumi:"stdin"`
	// The standard output of the command's process
	Stdout pulumi.StringOutput `pulumi:"stdout"`
	// The resource will be updated (or replaced) if any of these values change.
	//
	// The trigger values can be of any type.
	//
	// If the `update` command was provided the resource will be updated, otherwise it will be replaced using the `create` command.
	//
	// Please see the resource documentation for examples.
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`
	// The command to run when the resource is updated.
	//
	// If empty, the create command will be executed instead.
	//
	// Note that this command will not run if the resource's inputs are unchanged.
	//
	// Use `local.runOutput` if you need to run a command on every execution of your program.
	//
	// The environment variables `PULUMI_COMMAND_STDOUT` and `PULUMI_COMMAND_STDERR` are set to the `stdout` and `stderr` properties of the Command resource from previous create or update steps.
	Update pulumi.StringPtrOutput `pulumi:"update"`
}

// NewCommand registers a new resource with the given unique name, arguments, and options.
func NewCommand(ctx *pulumi.Context,
	name string, args *CommandArgs, opts ...pulumi.ResourceOption) (*Command, error) {
	if args == nil {
		args = &CommandArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"triggers[*]",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Command
	err := ctx.RegisterResource("command:local:Command", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCommand gets an existing Command resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCommand(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CommandState, opts ...pulumi.ResourceOption) (*Command, error) {
	var resource Command
	err := ctx.ReadResource("command:local:Command", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Command resources.
type commandState struct {
}

type CommandState struct {
}

func (CommandState) ElementType() reflect.Type {
	return reflect.TypeOf((*commandState)(nil)).Elem()
}

type commandArgs struct {
	// If the previous command's stdout and stderr (as generated by the prior create/update) is
	// injected into the environment of the next run as PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR.
	// Defaults to true.
	AddPreviousOutputInEnv *bool `pulumi:"addPreviousOutputInEnv"`
	// A list of path globs to return as a single archive asset after the command completes.
	//
	// When specifying glob patterns the following rules apply:
	// - We only include files not directories for assets and archives.
	// - Path separators are `/` on all platforms - including Windows.
	// - Patterns starting with `!` are 'exclude' rules.
	// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
	// - `*` matches anything except `/`
	// - `**` matches anything, _including_ `/`
	// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
	// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
	//
	// #### Example
	//
	// Given the rules:
	//
	// When evaluating against this folder:
	//
	// The following paths will be returned:
	ArchivePaths []string `pulumi:"archivePaths"`
	// A list of path globs to read after the command completes.
	//
	// When specifying glob patterns the following rules apply:
	// - We only include files not directories for assets and archives.
	// - Path separators are `/` on all platforms - including Windows.
	// - Patterns starting with `!` are 'exclude' rules.
	// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
	// - `*` matches anything except `/`
	// - `**` matches anything, _including_ `/`
	// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
	// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
	//
	// #### Example
	//
	// Given the rules:
	//
	// When evaluating against this folder:
	//
	// The following paths will be returned:
	AssetPaths []string `pulumi:"assetPaths"`
	// The command to run once on resource creation.
	//
	// If an `update` command isn't provided, then `create` will also be run when the resource's inputs are modified.
	//
	// Note that this command will not be executed if the resource has already been created and its inputs are unchanged.
	//
	// Use `local.runOutput` if you need to run a command on every execution of your program.
	Create *string `pulumi:"create"`
	// The command to run on resource delettion.
	//
	// The environment variables `PULUMI_COMMAND_STDOUT` and `PULUMI_COMMAND_STDERR` are set to the stdout and stderr properties of the Command resource from previous create or update steps.
	Delete *string `pulumi:"delete"`
	// The directory from which to run the command from. If `dir` does not exist, then
	// `Command` will fail.
	Dir *string `pulumi:"dir"`
	// Additional environment variables available to the command's process.
	Environment map[string]string `pulumi:"environment"`
	// The program and arguments to run the command.
	// On Linux and macOS, defaults to: `["/bin/sh", "-c"]`. On Windows, defaults to: `["cmd", "/C"]`
	Interpreter []string `pulumi:"interpreter"`
	// If the command's stdout and stderr should be logged. This doesn't affect the capturing of
	// stdout and stderr as outputs. If there might be secrets in the output, you can disable logging here and mark the
	// outputs as secret via 'additionalSecretOutputs'. Defaults to logging both stdout and stderr.
	Logging *Logging `pulumi:"logging"`
	// Pass a string to the command's process as standard in
	Stdin *string `pulumi:"stdin"`
	// The resource will be updated (or replaced) if any of these values change.
	//
	// The trigger values can be of any type.
	//
	// If the `update` command was provided the resource will be updated, otherwise it will be replaced using the `create` command.
	//
	// Please see the resource documentation for examples.
	Triggers []interface{} `pulumi:"triggers"`
	// The command to run when the resource is updated.
	//
	// If empty, the create command will be executed instead.
	//
	// Note that this command will not run if the resource's inputs are unchanged.
	//
	// Use `local.runOutput` if you need to run a command on every execution of your program.
	//
	// The environment variables `PULUMI_COMMAND_STDOUT` and `PULUMI_COMMAND_STDERR` are set to the `stdout` and `stderr` properties of the Command resource from previous create or update steps.
	Update *string `pulumi:"update"`
}

// The set of arguments for constructing a Command resource.
type CommandArgs struct {
	// If the previous command's stdout and stderr (as generated by the prior create/update) is
	// injected into the environment of the next run as PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR.
	// Defaults to true.
	AddPreviousOutputInEnv pulumi.BoolPtrInput
	// A list of path globs to return as a single archive asset after the command completes.
	//
	// When specifying glob patterns the following rules apply:
	// - We only include files not directories for assets and archives.
	// - Path separators are `/` on all platforms - including Windows.
	// - Patterns starting with `!` are 'exclude' rules.
	// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
	// - `*` matches anything except `/`
	// - `**` matches anything, _including_ `/`
	// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
	// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
	//
	// #### Example
	//
	// Given the rules:
	//
	// When evaluating against this folder:
	//
	// The following paths will be returned:
	ArchivePaths pulumi.StringArrayInput
	// A list of path globs to read after the command completes.
	//
	// When specifying glob patterns the following rules apply:
	// - We only include files not directories for assets and archives.
	// - Path separators are `/` on all platforms - including Windows.
	// - Patterns starting with `!` are 'exclude' rules.
	// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
	// - `*` matches anything except `/`
	// - `**` matches anything, _including_ `/`
	// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
	// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
	//
	// #### Example
	//
	// Given the rules:
	//
	// When evaluating against this folder:
	//
	// The following paths will be returned:
	AssetPaths pulumi.StringArrayInput
	// The command to run once on resource creation.
	//
	// If an `update` command isn't provided, then `create` will also be run when the resource's inputs are modified.
	//
	// Note that this command will not be executed if the resource has already been created and its inputs are unchanged.
	//
	// Use `local.runOutput` if you need to run a command on every execution of your program.
	Create pulumi.StringPtrInput
	// The command to run on resource delettion.
	//
	// The environment variables `PULUMI_COMMAND_STDOUT` and `PULUMI_COMMAND_STDERR` are set to the stdout and stderr properties of the Command resource from previous create or update steps.
	Delete pulumi.StringPtrInput
	// The directory from which to run the command from. If `dir` does not exist, then
	// `Command` will fail.
	Dir pulumi.StringPtrInput
	// Additional environment variables available to the command's process.
	Environment pulumi.StringMapInput
	// The program and arguments to run the command.
	// On Linux and macOS, defaults to: `["/bin/sh", "-c"]`. On Windows, defaults to: `["cmd", "/C"]`
	Interpreter pulumi.StringArrayInput
	// If the command's stdout and stderr should be logged. This doesn't affect the capturing of
	// stdout and stderr as outputs. If there might be secrets in the output, you can disable logging here and mark the
	// outputs as secret via 'additionalSecretOutputs'. Defaults to logging both stdout and stderr.
	Logging LoggingPtrInput
	// Pass a string to the command's process as standard in
	Stdin pulumi.StringPtrInput
	// The resource will be updated (or replaced) if any of these values change.
	//
	// The trigger values can be of any type.
	//
	// If the `update` command was provided the resource will be updated, otherwise it will be replaced using the `create` command.
	//
	// Please see the resource documentation for examples.
	Triggers pulumi.ArrayInput
	// The command to run when the resource is updated.
	//
	// If empty, the create command will be executed instead.
	//
	// Note that this command will not run if the resource's inputs are unchanged.
	//
	// Use `local.runOutput` if you need to run a command on every execution of your program.
	//
	// The environment variables `PULUMI_COMMAND_STDOUT` and `PULUMI_COMMAND_STDERR` are set to the `stdout` and `stderr` properties of the Command resource from previous create or update steps.
	Update pulumi.StringPtrInput
}

func (CommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*commandArgs)(nil)).Elem()
}

type CommandInput interface {
	pulumi.Input

	ToCommandOutput() CommandOutput
	ToCommandOutputWithContext(ctx context.Context) CommandOutput
}

func (*Command) ElementType() reflect.Type {
	return reflect.TypeOf((**Command)(nil)).Elem()
}

func (i *Command) ToCommandOutput() CommandOutput {
	return i.ToCommandOutputWithContext(context.Background())
}

func (i *Command) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandOutput)
}

// CommandArrayInput is an input type that accepts CommandArray and CommandArrayOutput values.
// You can construct a concrete instance of `CommandArrayInput` via:
//
//	CommandArray{ CommandArgs{...} }
type CommandArrayInput interface {
	pulumi.Input

	ToCommandArrayOutput() CommandArrayOutput
	ToCommandArrayOutputWithContext(context.Context) CommandArrayOutput
}

type CommandArray []CommandInput

func (CommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Command)(nil)).Elem()
}

func (i CommandArray) ToCommandArrayOutput() CommandArrayOutput {
	return i.ToCommandArrayOutputWithContext(context.Background())
}

func (i CommandArray) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandArrayOutput)
}

// CommandMapInput is an input type that accepts CommandMap and CommandMapOutput values.
// You can construct a concrete instance of `CommandMapInput` via:
//
//	CommandMap{ "key": CommandArgs{...} }
type CommandMapInput interface {
	pulumi.Input

	ToCommandMapOutput() CommandMapOutput
	ToCommandMapOutputWithContext(context.Context) CommandMapOutput
}

type CommandMap map[string]CommandInput

func (CommandMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Command)(nil)).Elem()
}

func (i CommandMap) ToCommandMapOutput() CommandMapOutput {
	return i.ToCommandMapOutputWithContext(context.Background())
}

func (i CommandMap) ToCommandMapOutputWithContext(ctx context.Context) CommandMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandMapOutput)
}

type CommandOutput struct{ *pulumi.OutputState }

func (CommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Command)(nil)).Elem()
}

func (o CommandOutput) ToCommandOutput() CommandOutput {
	return o
}

func (o CommandOutput) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return o
}

// If the previous command's stdout and stderr (as generated by the prior create/update) is
// injected into the environment of the next run as PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR.
// Defaults to true.
func (o CommandOutput) AddPreviousOutputInEnv() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Command) pulumi.BoolPtrOutput { return v.AddPreviousOutputInEnv }).(pulumi.BoolPtrOutput)
}

// An archive asset containing files found after running the command.
func (o CommandOutput) Archive() pulumi.ArchiveOutput {
	return o.ApplyT(func(v *Command) pulumi.ArchiveOutput { return v.Archive }).(pulumi.ArchiveOutput)
}

// A list of path globs to return as a single archive asset after the command completes.
//
// When specifying glob patterns the following rules apply:
// - We only include files not directories for assets and archives.
// - Path separators are `/` on all platforms - including Windows.
// - Patterns starting with `!` are 'exclude' rules.
// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
// - `*` matches anything except `/`
// - `**` matches anything, _including_ `/`
// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
//
// #### Example
//
// Given the rules:
//
// When evaluating against this folder:
//
// The following paths will be returned:
func (o CommandOutput) ArchivePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Command) pulumi.StringArrayOutput { return v.ArchivePaths }).(pulumi.StringArrayOutput)
}

// A list of path globs to read after the command completes.
//
// When specifying glob patterns the following rules apply:
// - We only include files not directories for assets and archives.
// - Path separators are `/` on all platforms - including Windows.
// - Patterns starting with `!` are 'exclude' rules.
// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
// - `*` matches anything except `/`
// - `**` matches anything, _including_ `/`
// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
//
// #### Example
//
// Given the rules:
//
// When evaluating against this folder:
//
// The following paths will be returned:
func (o CommandOutput) AssetPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Command) pulumi.StringArrayOutput { return v.AssetPaths }).(pulumi.StringArrayOutput)
}

// A map of assets found after running the command.
// The key is the relative path from the command dir
func (o CommandOutput) Assets() pulumi.AssetOrArchiveMapOutput {
	return o.ApplyT(func(v *Command) pulumi.AssetOrArchiveMapOutput { return v.Assets }).(pulumi.AssetOrArchiveMapOutput)
}

// The command to run once on resource creation.
//
// If an `update` command isn't provided, then `create` will also be run when the resource's inputs are modified.
//
// Note that this command will not be executed if the resource has already been created and its inputs are unchanged.
//
// Use `local.runOutput` if you need to run a command on every execution of your program.
func (o CommandOutput) Create() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Command) pulumi.StringPtrOutput { return v.Create }).(pulumi.StringPtrOutput)
}

// The command to run on resource delettion.
//
// The environment variables `PULUMI_COMMAND_STDOUT` and `PULUMI_COMMAND_STDERR` are set to the stdout and stderr properties of the Command resource from previous create or update steps.
func (o CommandOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Command) pulumi.StringPtrOutput { return v.Delete }).(pulumi.StringPtrOutput)
}

// The directory from which to run the command from. If `dir` does not exist, then
// `Command` will fail.
func (o CommandOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Command) pulumi.StringPtrOutput { return v.Dir }).(pulumi.StringPtrOutput)
}

// Additional environment variables available to the command's process.
func (o CommandOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Command) pulumi.StringMapOutput { return v.Environment }).(pulumi.StringMapOutput)
}

// The program and arguments to run the command.
// On Linux and macOS, defaults to: `["/bin/sh", "-c"]`. On Windows, defaults to: `["cmd", "/C"]`
func (o CommandOutput) Interpreter() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Command) pulumi.StringArrayOutput { return v.Interpreter }).(pulumi.StringArrayOutput)
}

// If the command's stdout and stderr should be logged. This doesn't affect the capturing of
// stdout and stderr as outputs. If there might be secrets in the output, you can disable logging here and mark the
// outputs as secret via 'additionalSecretOutputs'. Defaults to logging both stdout and stderr.
func (o CommandOutput) Logging() LoggingPtrOutput {
	return o.ApplyT(func(v *Command) LoggingPtrOutput { return v.Logging }).(LoggingPtrOutput)
}

// The standard error of the command's process
func (o CommandOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.Stderr }).(pulumi.StringOutput)
}

// Pass a string to the command's process as standard in
func (o CommandOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Command) pulumi.StringPtrOutput { return v.Stdin }).(pulumi.StringPtrOutput)
}

// The standard output of the command's process
func (o CommandOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.Stdout }).(pulumi.StringOutput)
}

// The resource will be updated (or replaced) if any of these values change.
//
// The trigger values can be of any type.
//
// If the `update` command was provided the resource will be updated, otherwise it will be replaced using the `create` command.
//
// Please see the resource documentation for examples.
func (o CommandOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Command) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

// The command to run when the resource is updated.
//
// If empty, the create command will be executed instead.
//
// Note that this command will not run if the resource's inputs are unchanged.
//
// Use `local.runOutput` if you need to run a command on every execution of your program.
//
// The environment variables `PULUMI_COMMAND_STDOUT` and `PULUMI_COMMAND_STDERR` are set to the `stdout` and `stderr` properties of the Command resource from previous create or update steps.
func (o CommandOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Command) pulumi.StringPtrOutput { return v.Update }).(pulumi.StringPtrOutput)
}

type CommandArrayOutput struct{ *pulumi.OutputState }

func (CommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Command)(nil)).Elem()
}

func (o CommandArrayOutput) ToCommandArrayOutput() CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) Index(i pulumi.IntInput) CommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Command {
		return vs[0].([]*Command)[vs[1].(int)]
	}).(CommandOutput)
}

type CommandMapOutput struct{ *pulumi.OutputState }

func (CommandMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Command)(nil)).Elem()
}

func (o CommandMapOutput) ToCommandMapOutput() CommandMapOutput {
	return o
}

func (o CommandMapOutput) ToCommandMapOutputWithContext(ctx context.Context) CommandMapOutput {
	return o
}

func (o CommandMapOutput) MapIndex(k pulumi.StringInput) CommandOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Command {
		return vs[0].(map[string]*Command)[vs[1].(string)]
	}).(CommandOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CommandInput)(nil)).Elem(), &Command{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandArrayInput)(nil)).Elem(), CommandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandMapInput)(nil)).Elem(), CommandMap{})
	pulumi.RegisterOutputType(CommandOutput{})
	pulumi.RegisterOutputType(CommandArrayOutput{})
	pulumi.RegisterOutputType(CommandMapOutput{})
}
