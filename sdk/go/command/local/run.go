// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package local

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-command/sdk/go/command/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A local command to be executed unconditionally.
// This command will always be run on any preview or deployment. Use `local.Command` to conditionally execute commands as part of the resource lifecycle.
func Run(ctx *pulumi.Context, args *RunArgs, opts ...pulumi.InvokeOption) (*RunResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv RunResult
	err := ctx.Invoke("command:local:run", args.Defaults(), &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type RunArgs struct {
	// If the previous command's stdout and stderr (as generated by the prior create/update) is
	// injected into the environment of the next run as PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR.
	// Defaults to true.
	AddPreviousOutputInEnv *bool `pulumi:"addPreviousOutputInEnv"`
	// A list of path globs to return as a single archive asset after the command completes.
	//
	// When specifying glob patterns the following rules apply:
	// - We only include files not directories for assets and archives.
	// - Path separators are `/` on all platforms - including Windows.
	// - Patterns starting with `!` are 'exclude' rules.
	// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
	// - `*` matches anything except `/`
	// - `**` matches anything, _including_ `/`
	// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
	// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
	//
	// #### Example
	//
	// Given the rules:
	//
	// When evaluating against this folder:
	//
	// The following paths will be returned:
	ArchivePaths []string `pulumi:"archivePaths"`
	// A list of path globs to read after the command completes.
	//
	// When specifying glob patterns the following rules apply:
	// - We only include files not directories for assets and archives.
	// - Path separators are `/` on all platforms - including Windows.
	// - Patterns starting with `!` are 'exclude' rules.
	// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
	// - `*` matches anything except `/`
	// - `**` matches anything, _including_ `/`
	// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
	// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
	//
	// #### Example
	//
	// Given the rules:
	//
	// When evaluating against this folder:
	//
	// The following paths will be returned:
	AssetPaths []string `pulumi:"assetPaths"`
	// The command to run.
	Command string `pulumi:"command"`
	// The directory from which to run the command from. If `dir` does not exist, then
	// `Command` will fail.
	Dir *string `pulumi:"dir"`
	// Additional environment variables available to the command's process.
	Environment map[string]string `pulumi:"environment"`
	// The program and arguments to run the command.
	// On Linux and macOS, defaults to: `["/bin/sh", "-c"]`. On Windows, defaults to: `["cmd", "/C"]`
	Interpreter []string `pulumi:"interpreter"`
	// If the command's stdout and stderr should be logged. This doesn't affect the capturing of
	// stdout and stderr as outputs. If there might be secrets in the output, you can disable logging here and mark the
	// outputs as secret via 'additionalSecretOutputs'. Defaults to logging both stdout and stderr.
	Logging *Logging `pulumi:"logging"`
	// Pass a string to the command's process as standard in
	Stdin *string `pulumi:"stdin"`
}

// Defaults sets the appropriate defaults for RunArgs
func (val *RunArgs) Defaults() *RunArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AddPreviousOutputInEnv == nil {
		addPreviousOutputInEnv_ := true
		tmp.AddPreviousOutputInEnv = &addPreviousOutputInEnv_
	}
	return &tmp
}

type RunResult struct {
	// If the previous command's stdout and stderr (as generated by the prior create/update) is
	// injected into the environment of the next run as PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR.
	// Defaults to true.
	AddPreviousOutputInEnv *bool `pulumi:"addPreviousOutputInEnv"`
	// An archive asset containing files found after running the command.
	Archive pulumi.Archive `pulumi:"archive"`
	// A list of path globs to return as a single archive asset after the command completes.
	//
	// When specifying glob patterns the following rules apply:
	// - We only include files not directories for assets and archives.
	// - Path separators are `/` on all platforms - including Windows.
	// - Patterns starting with `!` are 'exclude' rules.
	// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
	// - `*` matches anything except `/`
	// - `**` matches anything, _including_ `/`
	// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
	// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
	//
	// #### Example
	//
	// Given the rules:
	//
	// When evaluating against this folder:
	//
	// The following paths will be returned:
	ArchivePaths []string `pulumi:"archivePaths"`
	// A list of path globs to read after the command completes.
	//
	// When specifying glob patterns the following rules apply:
	// - We only include files not directories for assets and archives.
	// - Path separators are `/` on all platforms - including Windows.
	// - Patterns starting with `!` are 'exclude' rules.
	// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
	// - `*` matches anything except `/`
	// - `**` matches anything, _including_ `/`
	// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
	// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
	//
	// #### Example
	//
	// Given the rules:
	//
	// When evaluating against this folder:
	//
	// The following paths will be returned:
	AssetPaths []string `pulumi:"assetPaths"`
	// A map of assets found after running the command.
	// The key is the relative path from the command dir
	Assets map[string]pulumi.AssetOrArchive `pulumi:"assets"`
	// The command to run.
	Command string `pulumi:"command"`
	// The directory from which to run the command from. If `dir` does not exist, then
	// `Command` will fail.
	Dir *string `pulumi:"dir"`
	// Additional environment variables available to the command's process.
	Environment map[string]string `pulumi:"environment"`
	// The program and arguments to run the command.
	// On Linux and macOS, defaults to: `["/bin/sh", "-c"]`. On Windows, defaults to: `["cmd", "/C"]`
	Interpreter []string `pulumi:"interpreter"`
	// If the command's stdout and stderr should be logged. This doesn't affect the capturing of
	// stdout and stderr as outputs. If there might be secrets in the output, you can disable logging here and mark the
	// outputs as secret via 'additionalSecretOutputs'. Defaults to logging both stdout and stderr.
	Logging *Logging `pulumi:"logging"`
	// The standard error of the command's process
	Stderr string `pulumi:"stderr"`
	// Pass a string to the command's process as standard in
	Stdin *string `pulumi:"stdin"`
	// The standard output of the command's process
	Stdout string `pulumi:"stdout"`
}

// Defaults sets the appropriate defaults for RunResult
func (val *RunResult) Defaults() *RunResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AddPreviousOutputInEnv == nil {
		addPreviousOutputInEnv_ := true
		tmp.AddPreviousOutputInEnv = &addPreviousOutputInEnv_
	}
	return &tmp
}
func RunOutput(ctx *pulumi.Context, args RunOutputArgs, opts ...pulumi.InvokeOption) RunResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (RunResultOutput, error) {
			args := v.(RunArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("command:local:run", args.Defaults(), RunResultOutput{}, options).(RunResultOutput), nil
		}).(RunResultOutput)
}

type RunOutputArgs struct {
	// If the previous command's stdout and stderr (as generated by the prior create/update) is
	// injected into the environment of the next run as PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR.
	// Defaults to true.
	AddPreviousOutputInEnv pulumi.BoolPtrInput `pulumi:"addPreviousOutputInEnv"`
	// A list of path globs to return as a single archive asset after the command completes.
	//
	// When specifying glob patterns the following rules apply:
	// - We only include files not directories for assets and archives.
	// - Path separators are `/` on all platforms - including Windows.
	// - Patterns starting with `!` are 'exclude' rules.
	// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
	// - `*` matches anything except `/`
	// - `**` matches anything, _including_ `/`
	// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
	// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
	//
	// #### Example
	//
	// Given the rules:
	//
	// When evaluating against this folder:
	//
	// The following paths will be returned:
	ArchivePaths pulumi.StringArrayInput `pulumi:"archivePaths"`
	// A list of path globs to read after the command completes.
	//
	// When specifying glob patterns the following rules apply:
	// - We only include files not directories for assets and archives.
	// - Path separators are `/` on all platforms - including Windows.
	// - Patterns starting with `!` are 'exclude' rules.
	// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
	// - `*` matches anything except `/`
	// - `**` matches anything, _including_ `/`
	// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
	// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
	//
	// #### Example
	//
	// Given the rules:
	//
	// When evaluating against this folder:
	//
	// The following paths will be returned:
	AssetPaths pulumi.StringArrayInput `pulumi:"assetPaths"`
	// The command to run.
	Command pulumi.StringInput `pulumi:"command"`
	// The directory from which to run the command from. If `dir` does not exist, then
	// `Command` will fail.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Additional environment variables available to the command's process.
	Environment pulumi.StringMapInput `pulumi:"environment"`
	// The program and arguments to run the command.
	// On Linux and macOS, defaults to: `["/bin/sh", "-c"]`. On Windows, defaults to: `["cmd", "/C"]`
	Interpreter pulumi.StringArrayInput `pulumi:"interpreter"`
	// If the command's stdout and stderr should be logged. This doesn't affect the capturing of
	// stdout and stderr as outputs. If there might be secrets in the output, you can disable logging here and mark the
	// outputs as secret via 'additionalSecretOutputs'. Defaults to logging both stdout and stderr.
	Logging LoggingPtrInput `pulumi:"logging"`
	// Pass a string to the command's process as standard in
	Stdin pulumi.StringPtrInput `pulumi:"stdin"`
}

func (RunOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunArgs)(nil)).Elem()
}

type RunResultOutput struct{ *pulumi.OutputState }

func (RunResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunResult)(nil)).Elem()
}

func (o RunResultOutput) ToRunResultOutput() RunResultOutput {
	return o
}

func (o RunResultOutput) ToRunResultOutputWithContext(ctx context.Context) RunResultOutput {
	return o
}

// If the previous command's stdout and stderr (as generated by the prior create/update) is
// injected into the environment of the next run as PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR.
// Defaults to true.
func (o RunResultOutput) AddPreviousOutputInEnv() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RunResult) *bool { return v.AddPreviousOutputInEnv }).(pulumi.BoolPtrOutput)
}

// An archive asset containing files found after running the command.
func (o RunResultOutput) Archive() pulumi.ArchiveOutput {
	return o.ApplyT(func(v RunResult) pulumi.Archive { return v.Archive }).(pulumi.ArchiveOutput)
}

// A list of path globs to return as a single archive asset after the command completes.
//
// When specifying glob patterns the following rules apply:
// - We only include files not directories for assets and archives.
// - Path separators are `/` on all platforms - including Windows.
// - Patterns starting with `!` are 'exclude' rules.
// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
// - `*` matches anything except `/`
// - `**` matches anything, _including_ `/`
// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
//
// #### Example
//
// Given the rules:
//
// When evaluating against this folder:
//
// The following paths will be returned:
func (o RunResultOutput) ArchivePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RunResult) []string { return v.ArchivePaths }).(pulumi.StringArrayOutput)
}

// A list of path globs to read after the command completes.
//
// When specifying glob patterns the following rules apply:
// - We only include files not directories for assets and archives.
// - Path separators are `/` on all platforms - including Windows.
// - Patterns starting with `!` are 'exclude' rules.
// - Rules are evaluated in order, so exclude rules should be after inclusion rules.
// - `*` matches anything except `/`
// - `**` matches anything, _including_ `/`
// - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
// - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
//
// #### Example
//
// Given the rules:
//
// When evaluating against this folder:
//
// The following paths will be returned:
func (o RunResultOutput) AssetPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RunResult) []string { return v.AssetPaths }).(pulumi.StringArrayOutput)
}

// A map of assets found after running the command.
// The key is the relative path from the command dir
func (o RunResultOutput) Assets() pulumi.AssetOrArchiveMapOutput {
	return o.ApplyT(func(v RunResult) map[string]pulumi.AssetOrArchive { return v.Assets }).(pulumi.AssetOrArchiveMapOutput)
}

// The command to run.
func (o RunResultOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v RunResult) string { return v.Command }).(pulumi.StringOutput)
}

// The directory from which to run the command from. If `dir` does not exist, then
// `Command` will fail.
func (o RunResultOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResult) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Additional environment variables available to the command's process.
func (o RunResultOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v RunResult) map[string]string { return v.Environment }).(pulumi.StringMapOutput)
}

// The program and arguments to run the command.
// On Linux and macOS, defaults to: `["/bin/sh", "-c"]`. On Windows, defaults to: `["cmd", "/C"]`
func (o RunResultOutput) Interpreter() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RunResult) []string { return v.Interpreter }).(pulumi.StringArrayOutput)
}

// If the command's stdout and stderr should be logged. This doesn't affect the capturing of
// stdout and stderr as outputs. If there might be secrets in the output, you can disable logging here and mark the
// outputs as secret via 'additionalSecretOutputs'. Defaults to logging both stdout and stderr.
func (o RunResultOutput) Logging() LoggingPtrOutput {
	return o.ApplyT(func(v RunResult) *Logging { return v.Logging }).(LoggingPtrOutput)
}

// The standard error of the command's process
func (o RunResultOutput) Stderr() pulumi.StringOutput {
	return o.ApplyT(func(v RunResult) string { return v.Stderr }).(pulumi.StringOutput)
}

// Pass a string to the command's process as standard in
func (o RunResultOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunResult) *string { return v.Stdin }).(pulumi.StringPtrOutput)
}

// The standard output of the command's process
func (o RunResultOutput) Stdout() pulumi.StringOutput {
	return o.ApplyT(func(v RunResult) string { return v.Stdout }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(RunResultOutput{})
}
