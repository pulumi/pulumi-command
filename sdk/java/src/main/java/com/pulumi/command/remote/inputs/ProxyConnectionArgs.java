// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.command.remote.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Instructions for how to connect to a remote endpoint via a bastion host.
 * 
 */
public final class ProxyConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProxyConnectionArgs Empty = new ProxyConnectionArgs();

    /**
     * SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
     * 
     */
    @Import(name="agentSocketPath")
    private @Nullable Output<String> agentSocketPath;

    /**
     * @return SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
     * 
     */
    public Optional<Output<String>> agentSocketPath() {
        return Optional.ofNullable(this.agentSocketPath);
    }

    /**
     * Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
     * 
     */
    @Import(name="dialErrorLimit")
    private @Nullable Output<Integer> dialErrorLimit;

    /**
     * @return Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
     * 
     */
    public Optional<Output<Integer>> dialErrorLimit() {
        return Optional.ofNullable(this.dialErrorLimit);
    }

    /**
     * The address of the bastion host to connect to.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return The address of the bastion host to connect to.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * The expected host key to verify the server&#39;s identity. If not provided, the host key will be ignored.
     * 
     */
    @Import(name="hostKey")
    private @Nullable Output<String> hostKey;

    /**
     * @return The expected host key to verify the server&#39;s identity. If not provided, the host key will be ignored.
     * 
     */
    public Optional<Output<String>> hostKey() {
        return Optional.ofNullable(this.hostKey);
    }

    /**
     * The password we should use for the connection to the bastion host.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password we should use for the connection to the bastion host.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
     * 
     */
    @Import(name="perDialTimeout")
    private @Nullable Output<Integer> perDialTimeout;

    /**
     * @return Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
     * 
     */
    public Optional<Output<Integer>> perDialTimeout() {
        return Optional.ofNullable(this.perDialTimeout);
    }

    /**
     * The port of the bastion host to connect to.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Double> port;

    /**
     * @return The port of the bastion host to connect to.
     * 
     */
    public Optional<Output<Double>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The contents of an SSH key to use for the connection. This takes preference over the password if provided.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The contents of an SSH key to use for the connection. This takes preference over the password if provided.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The password to use in case the private key is encrypted.
     * 
     */
    @Import(name="privateKeyPassword")
    private @Nullable Output<String> privateKeyPassword;

    /**
     * @return The password to use in case the private key is encrypted.
     * 
     */
    public Optional<Output<String>> privateKeyPassword() {
        return Optional.ofNullable(this.privateKeyPassword);
    }

    /**
     * The user that we should use for the connection to the bastion host.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The user that we should use for the connection to the bastion host.
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private ProxyConnectionArgs() {}

    private ProxyConnectionArgs(ProxyConnectionArgs $) {
        this.agentSocketPath = $.agentSocketPath;
        this.dialErrorLimit = $.dialErrorLimit;
        this.host = $.host;
        this.hostKey = $.hostKey;
        this.password = $.password;
        this.perDialTimeout = $.perDialTimeout;
        this.port = $.port;
        this.privateKey = $.privateKey;
        this.privateKeyPassword = $.privateKeyPassword;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProxyConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProxyConnectionArgs $;

        public Builder() {
            $ = new ProxyConnectionArgs();
        }

        public Builder(ProxyConnectionArgs defaults) {
            $ = new ProxyConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentSocketPath SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
         * 
         * @return builder
         * 
         */
        public Builder agentSocketPath(@Nullable Output<String> agentSocketPath) {
            $.agentSocketPath = agentSocketPath;
            return this;
        }

        /**
         * @param agentSocketPath SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
         * 
         * @return builder
         * 
         */
        public Builder agentSocketPath(String agentSocketPath) {
            return agentSocketPath(Output.of(agentSocketPath));
        }

        /**
         * @param dialErrorLimit Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
         * 
         * @return builder
         * 
         */
        public Builder dialErrorLimit(@Nullable Output<Integer> dialErrorLimit) {
            $.dialErrorLimit = dialErrorLimit;
            return this;
        }

        /**
         * @param dialErrorLimit Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
         * 
         * @return builder
         * 
         */
        public Builder dialErrorLimit(Integer dialErrorLimit) {
            return dialErrorLimit(Output.of(dialErrorLimit));
        }

        /**
         * @param host The address of the bastion host to connect to.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The address of the bastion host to connect to.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param hostKey The expected host key to verify the server&#39;s identity. If not provided, the host key will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder hostKey(@Nullable Output<String> hostKey) {
            $.hostKey = hostKey;
            return this;
        }

        /**
         * @param hostKey The expected host key to verify the server&#39;s identity. If not provided, the host key will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder hostKey(String hostKey) {
            return hostKey(Output.of(hostKey));
        }

        /**
         * @param password The password we should use for the connection to the bastion host.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password we should use for the connection to the bastion host.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param perDialTimeout Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
         * 
         * @return builder
         * 
         */
        public Builder perDialTimeout(@Nullable Output<Integer> perDialTimeout) {
            $.perDialTimeout = perDialTimeout;
            return this;
        }

        /**
         * @param perDialTimeout Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
         * 
         * @return builder
         * 
         */
        public Builder perDialTimeout(Integer perDialTimeout) {
            return perDialTimeout(Output.of(perDialTimeout));
        }

        /**
         * @param port The port of the bastion host to connect to.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Double> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port of the bastion host to connect to.
         * 
         * @return builder
         * 
         */
        public Builder port(Double port) {
            return port(Output.of(port));
        }

        /**
         * @param privateKey The contents of an SSH key to use for the connection. This takes preference over the password if provided.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The contents of an SSH key to use for the connection. This takes preference over the password if provided.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param privateKeyPassword The password to use in case the private key is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassword(@Nullable Output<String> privateKeyPassword) {
            $.privateKeyPassword = privateKeyPassword;
            return this;
        }

        /**
         * @param privateKeyPassword The password to use in case the private key is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassword(String privateKeyPassword) {
            return privateKeyPassword(Output.of(privateKeyPassword));
        }

        /**
         * @param user The user that we should use for the connection to the bastion host.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The user that we should use for the connection to the bastion host.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public ProxyConnectionArgs build() {
            $.dialErrorLimit = Codegen.integerProp("dialErrorLimit").output().arg($.dialErrorLimit).def(10).getNullable();
            if ($.host == null) {
                throw new MissingRequiredPropertyException("ProxyConnectionArgs", "host");
            }
            $.perDialTimeout = Codegen.integerProp("perDialTimeout").output().arg($.perDialTimeout).def(15).getNullable();
            $.port = Codegen.doubleProp("port").output().arg($.port).def(2.2e+01).getNullable();
            $.user = Codegen.stringProp("user").output().arg($.user).def("root").getNullable();
            return $;
        }
    }

}
